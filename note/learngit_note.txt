#创建文件夹，设为git的repository（仓库）
mkdir learngit
cd learngit
git init

#在仓库中添加文件
git add<file>
git commit -m 'XXX'

example:
git add file1.txt
git add file2.txt file3.txt
git commit -m 'add 3 files.'

----------------------------------
#git status命令，掌握工作状态
#git diff可以查看文件被修改的内容

----------------------------------
git reset --hard commit_id （或者HARD^ 或者HARD数字）
git log查看提交历史，从而确定可以回退到哪个版本。
git reflog再已回退到过去版本的情况下，可查看命令历史，可以回到未来的某个版本。

----------------------------------
git remote add origin git@github.com:origin/repo-name.git
git push -u origin(或别的远程名）master(或别的分支名）
git push origin master
远程名多创建了一个写为origin1,为note的。

---------------------------------
克隆一个库到本地
git clone git@githunb.com:actledge/gitskills.git

---------------------------------
Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

---------------------------------
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

用git log --graph命令可以看到分支合并图。

---------------------------------
Git分支十分强大，在团队开发中应该充分应用。

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
